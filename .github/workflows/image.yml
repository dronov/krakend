name: Container Image

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GHCR_REGISTRY: ghcr.io
  SERVICE_ACCOUNT: gh-krakend
  IMAGE_NAME: krakend-operator

jobs:
  meta:
    name: Metadata
    runs-on: ubuntu-latest
    outputs:
      "version": ${{ steps.version.outputs.version }}
      "name": ${{ steps.name.outputs.name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: version
        run: echo "version=$(date +'%Y%m%d')-$(git rev-parse --short HEAD)" >> ${GITHUB_OUTPUT}

      - id: name
        run: echo "name=${{ github.event.repository.name }}" >> ${GITHUB_OUTPUT}

  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  build:
    name: Build and Test code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Restore cached binaries
        uses: actions/cache/restore@v3
        with:
          path: ${{ github.workspace }}/bin
          key: ${{ runner.os }}-bin-${{ hashFiles('Makefile', 'go.mod') }}
      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
      - name: Install make
        run: sudo apt-get update && sudo apt-get install make
      - name: Vet code
        run: make vet
      - name: Test code
        run: make test
      - name: Build binary
        run: make build
      - name: Cache installed binaries
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/bin
          key: ${{ runner.os }}-bin-${{ hashFiles('Makefile', 'go.mod') }}

  build_push_gar:
    outputs:
      version: ${{ steps.build-push-sign.outputs.version }}
    permissions:
      contents: "read"
      id-token: "write"
    name: Build and push to GAR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.3
      - uses: nais/platform-build-push-sign@main
        id: build-push-sign
        with:
          name: ${{ env.IMAGE_NAME }}
          google_service_account: ${{ env.SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ secrets.NAIS_IO_WORKLOAD_IDENTITY_PROVIDER }}
          push: true
  #   - uses: azure/setup-helm@v3
  #     name: "Setup Helm"
  #     with:
  #       version: "3.12.0"
  #   - name: Build Chart
  #     run: |-
  #       sed -i "s/^version: .*/version: ${{ steps.build-push-sign.outputs.version }}/g" charts/Chart.yaml
  #       cat charts/Chart.yaml
  #       helm package charts
  #   - name: Push Chart
  #     run: |-
  #       helm push ${{ env.NAME }}*.tgz ${{ env.IMAGE_REPOSITORY }}
  build_push_ghcr:
    name: Build and push to GHCR
    runs-on: ubuntu-latest-16-cores
    needs: [meta, lint, build]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/metadata-action@v5
        id: metadata
        with:
          images: |
            ${{ env.GHCR_REGISTRY }}/nais/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=sha
            type=raw,value=${{ needs.meta.outputs.version }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64